/dts-v1/;
/ {
 #address-cells = <1>;
 #size-cells = <1>;
 chosen { };
 aliases { };
};
/ {
 soc {
  #address-cells = <1>;
  #size-cells = <1>;
  compatible = "simple-bus";
  interrupt-parent = <&nvic>;
  ranges;
  nvic: interrupt-controller@e000e100 {
   #address-cells = <1>;
   compatible = "arm,v6m-nvic";
   reg = <0xe000e100 0xc00>;
   interrupt-controller;
   #interrupt-cells = <2>;
  };
  systick: timer@e000e010 {
   compatible = "arm,armv6m-systick";
   reg = <0xe000e010 0x10>;
  };
 };
};
/ {
 chosen {
  zephyr,flash-controller = &flash;
 };
 cpus {
  #address-cells = <1>;
  #size-cells = <0>;
  cpu@0 {
   device_type = "cpu";
   compatible = "arm,cortex-m0";
   reg = <0>;
  };
 };
 sram0: memory@20000000 {
  compatible = "mmio-sram";
 };
 clocks {
  clk_hse: clk-hse {
   #clock-cells = <0>;
   compatible = "st,stm32-hse-clock";
   status = "disabled";
  };
  clk_hsi: clk-hsi {
   #clock-cells = <0>;
   compatible = "fixed-clock";
   clock-frequency = <((8) * 1000 * 1000)>;
   status = "disabled";
  };
  clk_lse: clk-lse {
   #clock-cells = <0>;
   compatible = "fixed-clock";
   clock-frequency = <32768>;
   status = "disabled";
  };
  clk_lsi: clk-lsi {
   #clock-cells = <0>;
   compatible = "fixed-clock";
   clock-frequency = <((40) * 1000)>;
   status = "disabled";
  };
  pll: pll {
   #clock-cells = <0>;
   compatible = "st,stm32f0-pll-clock";
   status = "disabled";
  };
 };
 soc {
  flash: flash-controller@40022000 {
   compatible = "st,stm32-flash-controller", "st,stm32f0-flash-controller";
   label = "FLASH_CTRL";
   reg = <0x40022000 0x400>;
   interrupts = <3 0>;
   clocks = <&rcc 0 0x00000010>;
   #address-cells = <1>;
   #size-cells = <1>;
   flash0: flash@8000000 {
    compatible = "st,stm32-nv-flash", "soc-nv-flash";
    label = "FLASH_STM32";
    write-block-size = <2>;
    max-erase-time = <40>;
   };
  };
  rcc: rcc@40021000 {
   compatible = "st,stm32f0-rcc";
   #clock-cells = <2>;
   reg = <0x40021000 0x400>;
  };
  exti: interrupt-controller@40010400 {
   compatible = "st,stm32-exti";
   interrupt-controller;
   #interrupt-cells = <1>;
   reg = <0x40010400 0x400>;
  };
  pinctrl: pin-controller@48000000 {
   compatible = "st,stm32-pinctrl";
   #address-cells = <1>;
   #size-cells = <1>;
   reg = <0x48000000 0x1800>;
   gpioa: gpio@48000000 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x48000000 0x400>;
    clocks = <&rcc 0 0x00020000>;
    label = "GPIOA";
   };
   gpiob: gpio@48000400 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x48000400 0x400>;
    clocks = <&rcc 0 0x00040000>;
    label = "GPIOB";
   };
   gpioc: gpio@48000800 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x48000800 0x400>;
    clocks = <&rcc 0 0x00080000>;
    label = "GPIOC";
   };
   gpiod: gpio@48000c00 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x48000c00 0x400>;
    clocks = <&rcc 0 0x00100000>;
    label = "GPIOD";
   };
   gpiof: gpio@48001400 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x48001400 0x400>;
    clocks = <&rcc 0 0x00400000>;
    label = "GPIOF";
   };
  };
  usart1: serial@40013800 {
   compatible = "st,stm32-usart", "st,stm32-uart";
   reg = <0x40013800 0x400>;
   clocks = <&rcc 4 0x00004000>;
   interrupts = <27 0>;
   status = "disabled";
   label = "UART_1";
  };
  usart2: serial@40004400 {
   compatible = "st,stm32-usart", "st,stm32-uart";
   reg = <0x40004400 0x400>;
   clocks = <&rcc 2 0x00020000>;
   interrupts = <28 0>;
   status = "disabled";
   label = "UART_2";
  };
  i2c1: i2c@40005400 {
   compatible = "st,stm32-i2c-v2";
   clock-frequency = <100000>;
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40005400 0x400>;
   clocks = <&rcc 2 0x00200000>;
   interrupts = <23 0>;
   interrupt-names = "combined";
   status = "disabled";
   label= "I2C_1";
  };
  i2c2: i2c@40005800 {
   compatible = "st,stm32-i2c-v2";
   clock-frequency = <100000>;
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40005800 0x400>;
   clocks = <&rcc 2 0x00400000>;
   interrupts = <24 0>;
   interrupt-names = "combined";
   status = "disabled";
   label= "I2C_2";
  };
  spi1: spi@40013000 {
   compatible = "st,stm32-spi-fifo", "st,stm32-spi";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40013000 0x400>;
   clocks = <&rcc 4 0x00001000>;
   interrupts = <25 3>;
   status = "disabled";
   label = "SPI_1";
  };
  rtc: rtc@40002800 {
   compatible = "st,stm32-rtc";
   reg = <0x40002800 0x400>;
   clocks = <&rcc 2 0x10000000>;
   interrupts = <2 0>;
   prescaler = <32768>;
   status = "disabled";
   label = "RTC_0";
  };
  iwdg: watchdog@40003000 {
   compatible = "st,stm32-watchdog";
   reg = <0x40003000 0x400>;
   label = "IWDG";
  };
  wwdg: watchdog@40002c00 {
   compatible = "st,stm32-window-watchdog";
   reg = <0x40002C00 0x400>;
   clocks = <&rcc 2 0x00000800>;
   label = "WWDG";
   interrupts = <0 2>;
   status = "disabled";
  };
  timers1: timers@40012c00 {
   compatible = "st,stm32-timers";
   reg = <0x40012c00 0x400>;
   clocks = <&rcc 4 0x00000800>;
   interrupts = <13 0>, <14 0>;
   interrupt-names = "brk_up_trg_com", "cc";
   status = "disabled";
   label = "TIMERS_1";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <0>;
    label = "PWM_1";
    #pwm-cells = <3>;
   };
  };
  timers3: timers@40000400 {
   compatible = "st,stm32-timers";
   reg = <0x40000400 0x400>;
   clocks = <&rcc 2 0x00000002>;
   interrupts = <16 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_3";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <0>;
    label = "PWM_3";
    #pwm-cells = <3>;
   };
  };
  timers6: timers@40001000 {
   compatible = "st,stm32-timers";
   reg = <0x40001000 0x400>;
   clocks = <&rcc 2 0x00000010>;
   interrupts = <17 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_6";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <0>;
    label = "PWM_6";
    #pwm-cells = <3>;
   };
  };
  timers7: timers@40001400 {
   compatible = "st,stm32-timers";
   reg = <0x40001400 0x400>;
   clocks = <&rcc 2 0x00000020>;
   interrupts = <18 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_7";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <0>;
    label = "PWM_7";
    #pwm-cells = <3>;
   };
  };
  timers14: timers@40002000 {
   compatible = "st,stm32-timers";
   reg = <0x40002000 0x400>;
   clocks = <&rcc 2 0x00000100>;
   interrupts = <19 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_14";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <0>;
    label = "PWM_14";
    #pwm-cells = <3>;
   };
  };
  timers15: timers@40014000 {
   compatible = "st,stm32-timers";
   reg = <0x40014000 0x400>;
   clocks = <&rcc 4 0x00010000>;
   interrupts = <20 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_15";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <0>;
    label = "PWM_15";
    #pwm-cells = <3>;
   };
  };
  timers16: timers@40014400 {
   compatible = "st,stm32-timers";
   reg = <0x40014400 0x400>;
   clocks = <&rcc 4 0x00020000>;
   interrupts = <21 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_16";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <0>;
    label = "PWM_16";
    #pwm-cells = <3>;
   };
  };
  timers17: timers@40014800 {
   compatible = "st,stm32-timers";
   reg = <0x40014800 0x400>;
   clocks = <&rcc 4 0x00040000>;
   interrupts = <22 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_17";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <0>;
    label = "PWM_17";
    #pwm-cells = <3>;
   };
  };
  adc1: adc@40012400 {
   compatible = "st,stm32-adc";
   reg = <0x40012400 0x400>;
   clocks = <&rcc 4 0x00000200>;
   interrupts = <12 0>;
   status = "disabled";
   label = "ADC_1";
   #io-channel-cells = <1>;
  };
  dma1: dma@40020000 {
   compatible = "st,stm32-dma-v2bis";
   #dma-cells = <2>;
   reg = <0x40020000 0x400>;
   clocks = <&rcc 0 0x1>;
   interrupts = <9 0 10 0 10 0 11 0 11 0>;
   status = "disabled";
   label = "DMA_1";
  };
 };
};
&nvic {
 arm,num-irq-priority-bits = <2>;
};
/ {
 soc {
  flash-controller@40022000 {
   flash0: flash@8000000 {
    erase-block-size = <2048>;
   };
  };
  pinctrl: pin-controller@48000000 {
   gpioe: gpio@48001000 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x48001000 0x400>;
    clocks = <&rcc 0 0x00200000>;
    label = "GPIOE";
   };
  };
  timers2: timers@40000000 {
   compatible = "st,stm32-timers";
   reg = <0x40000000 0x400>;
   clocks = <&rcc 2 0x00000001>;
   interrupts = <15 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_2";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <0>;
    label = "PWM_2";
    #pwm-cells = <3>;
   };
  };
  spi2: spi@40003800 {
   compatible = "st,stm32-spi-fifo", "st,stm32-spi";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40003800 0x400>;
   clocks = <&rcc 2 0x00004000>;
   interrupts = <26 3>;
   status = "disabled";
   label = "SPI_2";
  };
  usb: usb@40005c00 {
   compatible = "st,stm32-usb";
   reg = <0x40005c00 0x400>;
   interrupts = <31 0>;
   interrupt-names = "usb";
   num-bidir-endpoints = <8>;
   ram-size = <1024>;
   phys = <&usb_fs_phy>;
   clocks = <&rcc 2 0x00800000>;
   status = "disabled";
   label= "USB";
  };
  can1: can@40006400 {
   compatible = "st,stm32-can";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40006400 0x400>;
   interrupts = <30 0>;
   clocks = <&rcc 2 0x02000000>;
   status = "disabled";
   label = "CAN_1";
   bus-speed = <250000>;
   sjw = <1>;
   prop-seg = <0>;
   phase-seg1 = <5>;
   phase-seg2 = <6>;
  };
  dac1: dac@40007400 {
   compatible = "st,stm32-dac";
   reg = <0x40007400 0x400>;
   clocks = <&rcc 2 0x20000000>;
   status = "disabled";
   label = "DAC_1";
   #io-channel-cells = <1>;
  };
  dma1: dma@40020000 {
   interrupts = <9 0 10 0 10 0 11 0 11 0 11 0 11 0>;
  };
 };
 usb_fs_phy: usbphy {
  compatible = "usb-nop-xceiv";
  #phy-cells = <0>;
  label = "USB_FS_PHY";
 };
};
/ {
 sram0: memory@20000000 {
  reg = <0x20000000 ((16) * 1024)>;
 };
 soc {
  flash-controller@40022000 {
   flash0: flash@8000000 {
    reg = <0x08000000 ((128) * 1024)>;
   };
  };
 };
};
/ {
 soc {
  pinctrl: pin-controller@48000000 {
   adc_in0_pa0: adc_in0_pa0 {
    pinmux = <(((((('A') - 'A') * 0x10 + (0))) << 8) | (0x10))>;
   };
   adc_in1_pa1: adc_in1_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0x10))>;
   };
   adc_in2_pa2: adc_in2_pa2 {
    pinmux = <(((((('A') - 'A') * 0x10 + (2))) << 8) | (0x10))>;
   };
   adc_in3_pa3: adc_in3_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0x10))>;
   };
   adc_in4_pa4: adc_in4_pa4 {
    pinmux = <(((((('A') - 'A') * 0x10 + (4))) << 8) | (0x10))>;
   };
   adc_in5_pa5: adc_in5_pa5 {
    pinmux = <(((((('A') - 'A') * 0x10 + (5))) << 8) | (0x10))>;
   };
   adc_in6_pa6: adc_in6_pa6 {
    pinmux = <(((((('A') - 'A') * 0x10 + (6))) << 8) | (0x10))>;
   };
   adc_in7_pa7: adc_in7_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x10))>;
   };
   adc_in8_pb0: adc_in8_pb0 {
    pinmux = <(((((('B') - 'A') * 0x10 + (0))) << 8) | (0x10))>;
   };
   adc_in9_pb1: adc_in9_pb1 {
    pinmux = <(((((('B') - 'A') * 0x10 + (1))) << 8) | (0x10))>;
   };
   adc_in10_pc0: adc_in10_pc0 {
    pinmux = <(((((('C') - 'A') * 0x10 + (0))) << 8) | (0x10))>;
   };
   adc_in11_pc1: adc_in11_pc1 {
    pinmux = <(((((('C') - 'A') * 0x10 + (1))) << 8) | (0x10))>;
   };
   adc_in12_pc2: adc_in12_pc2 {
    pinmux = <(((((('C') - 'A') * 0x10 + (2))) << 8) | (0x10))>;
   };
   adc_in13_pc3: adc_in13_pc3 {
    pinmux = <(((((('C') - 'A') * 0x10 + (3))) << 8) | (0x10))>;
   };
   adc_in14_pc4: adc_in14_pc4 {
    pinmux = <(((((('C') - 'A') * 0x10 + (4))) << 8) | (0x10))>;
   };
   adc_in15_pc5: adc_in15_pc5 {
    pinmux = <(((((('C') - 'A') * 0x10 + (5))) << 8) | (0x10))>;
   };
   can_rx_pa11: can_rx_pa11 {
    pinmux = <(((((('A') - 'A') * 0x10 + (11))) << 8) | (0x4))>;
    bias-pull-up;
   };
   can_rx_pb8: can_rx_pb8 {
    pinmux = <(((((('B') - 'A') * 0x10 + (8))) << 8) | (0x4))>;
    bias-pull-up;
   };
   can_tx_pa12: can_tx_pa12 {
    pinmux = <(((((('A') - 'A') * 0x10 + (12))) << 8) | (0x4))>;
   };
   can_tx_pb9: can_tx_pb9 {
    pinmux = <(((((('B') - 'A') * 0x10 + (9))) << 8) | (0x4))>;
   };
   dac_out1_pa4: dac_out1_pa4 {
    pinmux = <(((((('A') - 'A') * 0x10 + (4))) << 8) | (0x10))>;
   };
   dac_out2_pa5: dac_out2_pa5 {
    pinmux = <(((((('A') - 'A') * 0x10 + (5))) << 8) | (0x10))>;
   };
   i2c1_scl_pb6: i2c1_scl_pb6 {
    pinmux = <(((((('B') - 'A') * 0x10 + (6))) << 8) | (0x1))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c1_scl_pb8: i2c1_scl_pb8 {
    pinmux = <(((((('B') - 'A') * 0x10 + (8))) << 8) | (0x1))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c2_scl_pb10: i2c2_scl_pb10 {
    pinmux = <(((((('B') - 'A') * 0x10 + (10))) << 8) | (0x1))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c2_scl_pb13: i2c2_scl_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x5))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c1_sda_pb7: i2c1_sda_pb7 {
    pinmux = <(((((('B') - 'A') * 0x10 + (7))) << 8) | (0x1))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c1_sda_pb9: i2c1_sda_pb9 {
    pinmux = <(((((('B') - 'A') * 0x10 + (9))) << 8) | (0x1))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c2_sda_pb11: i2c2_sda_pb11 {
    pinmux = <(((((('B') - 'A') * 0x10 + (11))) << 8) | (0x1))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c2_sda_pb14: i2c2_sda_pb14 {
    pinmux = <(((((('B') - 'A') * 0x10 + (14))) << 8) | (0x5))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2s1_ck_pa5: i2s1_ck_pa5 {
    pinmux = <(((((('A') - 'A') * 0x10 + (5))) << 8) | (0x0))>;
    slew-rate = "very-high-speed";
   };
   i2s1_ck_pb3: i2s1_ck_pb3 {
    pinmux = <(((((('B') - 'A') * 0x10 + (3))) << 8) | (0x0))>;
    slew-rate = "very-high-speed";
   };
   i2s2_ck_pb10: i2s2_ck_pb10 {
    pinmux = <(((((('B') - 'A') * 0x10 + (10))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   i2s2_ck_pb13: i2s2_ck_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x0))>;
    slew-rate = "very-high-speed";
   };
   i2s1_sd_pa7: i2s1_sd_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x0))>;
   };
   i2s1_sd_pb5: i2s1_sd_pb5 {
    pinmux = <(((((('B') - 'A') * 0x10 + (5))) << 8) | (0x0))>;
   };
   i2s2_sd_pb15: i2s2_sd_pb15 {
    pinmux = <(((((('B') - 'A') * 0x10 + (15))) << 8) | (0x0))>;
   };
   i2s2_sd_pc3: i2s2_sd_pc3 {
    pinmux = <(((((('C') - 'A') * 0x10 + (3))) << 8) | (0x1))>;
   };
   i2s1_ws_pa4: i2s1_ws_pa4 {
    pinmux = <(((((('A') - 'A') * 0x10 + (4))) << 8) | (0x0))>;
   };
   i2s1_ws_pa15: i2s1_ws_pa15 {
    pinmux = <(((((('A') - 'A') * 0x10 + (15))) << 8) | (0x0))>;
   };
   i2s2_ws_pb9: i2s2_ws_pb9 {
    pinmux = <(((((('B') - 'A') * 0x10 + (9))) << 8) | (0x5))>;
   };
   i2s2_ws_pb12: i2s2_ws_pb12 {
    pinmux = <(((((('B') - 'A') * 0x10 + (12))) << 8) | (0x0))>;
   };
   spi1_miso_pa6: spi1_miso_pa6 {
    pinmux = <(((((('A') - 'A') * 0x10 + (6))) << 8) | (0x0))>;
    bias-pull-down;
   };
   spi1_miso_pb4: spi1_miso_pb4 {
    pinmux = <(((((('B') - 'A') * 0x10 + (4))) << 8) | (0x0))>;
    bias-pull-down;
   };
   spi2_miso_pb14: spi2_miso_pb14 {
    pinmux = <(((((('B') - 'A') * 0x10 + (14))) << 8) | (0x0))>;
    bias-pull-down;
   };
   spi2_miso_pc2: spi2_miso_pc2 {
    pinmux = <(((((('C') - 'A') * 0x10 + (2))) << 8) | (0x1))>;
    bias-pull-down;
   };
   spi1_mosi_pa7: spi1_mosi_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x0))>;
    bias-pull-down;
   };
   spi1_mosi_pb5: spi1_mosi_pb5 {
    pinmux = <(((((('B') - 'A') * 0x10 + (5))) << 8) | (0x0))>;
    bias-pull-down;
   };
   spi2_mosi_pb15: spi2_mosi_pb15 {
    pinmux = <(((((('B') - 'A') * 0x10 + (15))) << 8) | (0x0))>;
    bias-pull-down;
   };
   spi2_mosi_pc3: spi2_mosi_pc3 {
    pinmux = <(((((('C') - 'A') * 0x10 + (3))) << 8) | (0x1))>;
    bias-pull-down;
   };
   spi1_nss_pa4: spi1_nss_pa4 {
    pinmux = <(((((('A') - 'A') * 0x10 + (4))) << 8) | (0x0))>;
    bias-pull-up;
   };
   spi1_nss_pa15: spi1_nss_pa15 {
    pinmux = <(((((('A') - 'A') * 0x10 + (15))) << 8) | (0x0))>;
    bias-pull-up;
   };
   spi2_nss_pb9: spi2_nss_pb9 {
    pinmux = <(((((('B') - 'A') * 0x10 + (9))) << 8) | (0x5))>;
    bias-pull-up;
   };
   spi2_nss_pb12: spi2_nss_pb12 {
    pinmux = <(((((('B') - 'A') * 0x10 + (12))) << 8) | (0x0))>;
    bias-pull-up;
   };
   spi1_sck_pa5: spi1_sck_pa5 {
    pinmux = <(((((('A') - 'A') * 0x10 + (5))) << 8) | (0x0))>;
    bias-pull-down;
    slew-rate = "very-high-speed";
   };
   spi1_sck_pb3: spi1_sck_pb3 {
    pinmux = <(((((('B') - 'A') * 0x10 + (3))) << 8) | (0x0))>;
    bias-pull-down;
    slew-rate = "very-high-speed";
   };
   spi2_sck_pb10: spi2_sck_pb10 {
    pinmux = <(((((('B') - 'A') * 0x10 + (10))) << 8) | (0x5))>;
    bias-pull-down;
    slew-rate = "very-high-speed";
   };
   spi2_sck_pb13: spi2_sck_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x0))>;
    bias-pull-down;
    slew-rate = "very-high-speed";
   };
   tim1_ch1n_pa7: tim1_ch1n_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x2))>;
   };
   tim1_ch1_pa8: tim1_ch1_pa8 {
    pinmux = <(((((('A') - 'A') * 0x10 + (8))) << 8) | (0x2))>;
   };
   tim1_ch2_pa9: tim1_ch2_pa9 {
    pinmux = <(((((('A') - 'A') * 0x10 + (9))) << 8) | (0x2))>;
   };
   tim1_ch3_pa10: tim1_ch3_pa10 {
    pinmux = <(((((('A') - 'A') * 0x10 + (10))) << 8) | (0x2))>;
   };
   tim1_ch4_pa11: tim1_ch4_pa11 {
    pinmux = <(((((('A') - 'A') * 0x10 + (11))) << 8) | (0x2))>;
   };
   tim1_ch2n_pb0: tim1_ch2n_pb0 {
    pinmux = <(((((('B') - 'A') * 0x10 + (0))) << 8) | (0x2))>;
   };
   tim1_ch3n_pb1: tim1_ch3n_pb1 {
    pinmux = <(((((('B') - 'A') * 0x10 + (1))) << 8) | (0x2))>;
   };
   tim1_ch1n_pb13: tim1_ch1n_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x2))>;
   };
   tim1_ch2n_pb14: tim1_ch2n_pb14 {
    pinmux = <(((((('B') - 'A') * 0x10 + (14))) << 8) | (0x2))>;
   };
   tim1_ch3n_pb15: tim1_ch3n_pb15 {
    pinmux = <(((((('B') - 'A') * 0x10 + (15))) << 8) | (0x2))>;
   };
   tim2_ch1_pa0: tim2_ch1_pa0 {
    pinmux = <(((((('A') - 'A') * 0x10 + (0))) << 8) | (0x2))>;
   };
   tim2_ch2_pa1: tim2_ch2_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0x2))>;
   };
   tim2_ch3_pa2: tim2_ch3_pa2 {
    pinmux = <(((((('A') - 'A') * 0x10 + (2))) << 8) | (0x2))>;
   };
   tim2_ch4_pa3: tim2_ch4_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0x2))>;
   };
   tim2_ch1_pa5: tim2_ch1_pa5 {
    pinmux = <(((((('A') - 'A') * 0x10 + (5))) << 8) | (0x2))>;
   };
   tim2_ch1_pa15: tim2_ch1_pa15 {
    pinmux = <(((((('A') - 'A') * 0x10 + (15))) << 8) | (0x2))>;
   };
   tim2_ch2_pb3: tim2_ch2_pb3 {
    pinmux = <(((((('B') - 'A') * 0x10 + (3))) << 8) | (0x2))>;
   };
   tim2_ch3_pb10: tim2_ch3_pb10 {
    pinmux = <(((((('B') - 'A') * 0x10 + (10))) << 8) | (0x2))>;
   };
   tim2_ch4_pb11: tim2_ch4_pb11 {
    pinmux = <(((((('B') - 'A') * 0x10 + (11))) << 8) | (0x2))>;
   };
   tim3_ch1_pa6: tim3_ch1_pa6 {
    pinmux = <(((((('A') - 'A') * 0x10 + (6))) << 8) | (0x1))>;
   };
   tim3_ch2_pa7: tim3_ch2_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x1))>;
   };
   tim3_ch3_pb0: tim3_ch3_pb0 {
    pinmux = <(((((('B') - 'A') * 0x10 + (0))) << 8) | (0x1))>;
   };
   tim3_ch4_pb1: tim3_ch4_pb1 {
    pinmux = <(((((('B') - 'A') * 0x10 + (1))) << 8) | (0x1))>;
   };
   tim3_ch1_pb4: tim3_ch1_pb4 {
    pinmux = <(((((('B') - 'A') * 0x10 + (4))) << 8) | (0x1))>;
   };
   tim3_ch2_pb5: tim3_ch2_pb5 {
    pinmux = <(((((('B') - 'A') * 0x10 + (5))) << 8) | (0x1))>;
   };
   tim3_ch1_pc6: tim3_ch1_pc6 {
    pinmux = <(((((('C') - 'A') * 0x10 + (6))) << 8) | (0x0))>;
   };
   tim3_ch2_pc7: tim3_ch2_pc7 {
    pinmux = <(((((('C') - 'A') * 0x10 + (7))) << 8) | (0x0))>;
   };
   tim3_ch3_pc8: tim3_ch3_pc8 {
    pinmux = <(((((('C') - 'A') * 0x10 + (8))) << 8) | (0x0))>;
   };
   tim3_ch4_pc9: tim3_ch4_pc9 {
    pinmux = <(((((('C') - 'A') * 0x10 + (9))) << 8) | (0x0))>;
   };
   tim14_ch1_pa4: tim14_ch1_pa4 {
    pinmux = <(((((('A') - 'A') * 0x10 + (4))) << 8) | (0x4))>;
   };
   tim14_ch1_pa7: tim14_ch1_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x4))>;
   };
   tim14_ch1_pb1: tim14_ch1_pb1 {
    pinmux = <(((((('B') - 'A') * 0x10 + (1))) << 8) | (0x0))>;
   };
   tim15_ch1n_pa1: tim15_ch1n_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0x5))>;
   };
   tim15_ch1_pa2: tim15_ch1_pa2 {
    pinmux = <(((((('A') - 'A') * 0x10 + (2))) << 8) | (0x0))>;
   };
   tim15_ch2_pa3: tim15_ch2_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0x0))>;
   };
   tim15_ch1_pb14: tim15_ch1_pb14 {
    pinmux = <(((((('B') - 'A') * 0x10 + (14))) << 8) | (0x1))>;
   };
   tim15_ch1n_pb15: tim15_ch1n_pb15 {
    pinmux = <(((((('B') - 'A') * 0x10 + (15))) << 8) | (0x3))>;
   };
   tim15_ch2_pb15: tim15_ch2_pb15 {
    pinmux = <(((((('B') - 'A') * 0x10 + (15))) << 8) | (0x1))>;
   };
   tim16_ch1_pa6: tim16_ch1_pa6 {
    pinmux = <(((((('A') - 'A') * 0x10 + (6))) << 8) | (0x5))>;
   };
   tim16_ch1n_pb6: tim16_ch1n_pb6 {
    pinmux = <(((((('B') - 'A') * 0x10 + (6))) << 8) | (0x2))>;
   };
   tim16_ch1_pb8: tim16_ch1_pb8 {
    pinmux = <(((((('B') - 'A') * 0x10 + (8))) << 8) | (0x2))>;
   };
   tim17_ch1_pa7: tim17_ch1_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x5))>;
   };
   tim17_ch1n_pb7: tim17_ch1n_pb7 {
    pinmux = <(((((('B') - 'A') * 0x10 + (7))) << 8) | (0x2))>;
   };
   tim17_ch1_pb9: tim17_ch1_pb9 {
    pinmux = <(((((('B') - 'A') * 0x10 + (9))) << 8) | (0x2))>;
   };
   usart1_cts_pa11: usart1_cts_pa11 {
    pinmux = <(((((('A') - 'A') * 0x10 + (11))) << 8) | (0x1))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart2_cts_pa0: usart2_cts_pa0 {
    pinmux = <(((((('A') - 'A') * 0x10 + (0))) << 8) | (0x1))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart3_cts_pa6: usart3_cts_pa6 {
    pinmux = <(((((('A') - 'A') * 0x10 + (6))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart3_cts_pb13: usart3_cts_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart4_cts_pb7: usart4_cts_pb7 {
    pinmux = <(((((('B') - 'A') * 0x10 + (7))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart1_rts_pa12: usart1_rts_pa12 {
    pinmux = <(((((('A') - 'A') * 0x10 + (12))) << 8) | (0x1))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart2_rts_pa1: usart2_rts_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0x1))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart3_rts_pb1: usart3_rts_pb1 {
    pinmux = <(((((('B') - 'A') * 0x10 + (1))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart3_rts_pb14: usart3_rts_pb14 {
    pinmux = <(((((('B') - 'A') * 0x10 + (14))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart3_rts_pd2: usart3_rts_pd2 {
    pinmux = <(((((('D') - 'A') * 0x10 + (2))) << 8) | (0x1))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart4_rts_pa15: usart4_rts_pa15 {
    pinmux = <(((((('A') - 'A') * 0x10 + (15))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart1_rx_pa10: usart1_rx_pa10 {
    pinmux = <(((((('A') - 'A') * 0x10 + (10))) << 8) | (0x1))>;
   };
   usart1_rx_pb7: usart1_rx_pb7 {
    pinmux = <(((((('B') - 'A') * 0x10 + (7))) << 8) | (0x0))>;
   };
   usart2_rx_pa3: usart2_rx_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0x1))>;
   };
   usart2_rx_pa15: usart2_rx_pa15 {
    pinmux = <(((((('A') - 'A') * 0x10 + (15))) << 8) | (0x1))>;
   };
   usart3_rx_pb11: usart3_rx_pb11 {
    pinmux = <(((((('B') - 'A') * 0x10 + (11))) << 8) | (0x4))>;
   };
   usart3_rx_pc5: usart3_rx_pc5 {
    pinmux = <(((((('C') - 'A') * 0x10 + (5))) << 8) | (0x1))>;
   };
   usart3_rx_pc11: usart3_rx_pc11 {
    pinmux = <(((((('C') - 'A') * 0x10 + (11))) << 8) | (0x1))>;
   };
   usart4_rx_pa1: usart4_rx_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0x4))>;
   };
   usart4_rx_pc11: usart4_rx_pc11 {
    pinmux = <(((((('C') - 'A') * 0x10 + (11))) << 8) | (0x0))>;
   };
   usart1_tx_pa9: usart1_tx_pa9 {
    pinmux = <(((((('A') - 'A') * 0x10 + (9))) << 8) | (0x1))>;
    bias-pull-up;
   };
   usart1_tx_pb6: usart1_tx_pb6 {
    pinmux = <(((((('B') - 'A') * 0x10 + (6))) << 8) | (0x0))>;
    bias-pull-up;
   };
   usart2_tx_pa2: usart2_tx_pa2 {
    pinmux = <(((((('A') - 'A') * 0x10 + (2))) << 8) | (0x1))>;
    bias-pull-up;
   };
   usart2_tx_pa14: usart2_tx_pa14 {
    pinmux = <(((((('A') - 'A') * 0x10 + (14))) << 8) | (0x1))>;
    bias-pull-up;
   };
   usart3_tx_pb10: usart3_tx_pb10 {
    pinmux = <(((((('B') - 'A') * 0x10 + (10))) << 8) | (0x4))>;
    bias-pull-up;
   };
   usart3_tx_pc4: usart3_tx_pc4 {
    pinmux = <(((((('C') - 'A') * 0x10 + (4))) << 8) | (0x1))>;
    bias-pull-up;
   };
   usart3_tx_pc10: usart3_tx_pc10 {
    pinmux = <(((((('C') - 'A') * 0x10 + (10))) << 8) | (0x1))>;
    bias-pull-up;
   };
   usart4_tx_pa0: usart4_tx_pa0 {
    pinmux = <(((((('A') - 'A') * 0x10 + (0))) << 8) | (0x4))>;
    bias-pull-up;
   };
   usart4_tx_pc10: usart4_tx_pc10 {
    pinmux = <(((((('C') - 'A') * 0x10 + (10))) << 8) | (0x0))>;
    bias-pull-up;
   };
   usb_dm_pa11: usb_dm_pa11 {
    pinmux = <(((((('A') - 'A') * 0x10 + (11))) << 8) | (0x10))>;
   };
   usb_dp_pa12: usb_dp_pa12 {
    pinmux = <(((((('A') - 'A') * 0x10 + (12))) << 8) | (0x10))>;
   };
   usb_noe_pa13: usb_noe_pa13 {
    pinmux = <(((((('A') - 'A') * 0x10 + (13))) << 8) | (0x2))>;
   };
  };
 };
};
/ {
 model = "STMicroelectronics STM32F072B-DISCO board";
 compatible = "st,stm32f072b-disco";
 chosen {
  zephyr,console = &usart1;
  zephyr,shell-uart = &usart1;
  zephyr,sram = &sram0;
  zephyr,flash = &flash0;
  zephyr,can-primary = &can1;
 };
 leds {
  compatible = "gpio-leds";
  red_up_led_3: led_3 {
   gpios = <&gpioc 6 (0 << 0)>;
   label = "User LD3";
  };
  yellow_left_4: led_4 {
   gpios = <&gpioc 8 (0 << 0)>;
   label = "User LD4";
  };
  green_right_led_5: led_5 {
   gpios = <&gpioc 9 (0 << 0)>;
   label = "User LD5";
  };
  blue_low_led_6: led_6 {
   gpios = <&gpioc 7 (0 << 0)>;
   label = "User LD6";
  };
 };
 gpio_keys {
  compatible = "gpio-keys";
  user_button: button {
   label = "User";
   gpios = <&gpioa 0 (1 << 0)>;
  };
 };
 aliases {
  led0 = &red_up_led_3;
  led1 = &yellow_left_4;
  led2 = &green_right_led_5;
  led3 = &blue_low_led_6;
  sw0 = &user_button;
 };
};
&clk_hsi {
 status = "okay";
};
&pll {
 prediv = <1>;
 mul = <6>;
 clocks = <&clk_hsi>;
 status = "okay";
};
&rcc {
 clocks = <&pll>;
 clock-frequency = <((48) * 1000 * 1000)>;
 ahb-prescaler = <1>;
 apb1-prescaler = <1>;
};
&usart1 {
 pinctrl-0 = <&usart1_tx_pb6 &usart1_rx_pb7>;
 current-speed = <115200>;
 status = "okay";
};
&i2c1 {
 pinctrl-0 = <&i2c1_scl_pb8 &i2c1_sda_pb9>;
 status = "okay";
 clock-frequency = <400000>;
};
&i2c2 {
 pinctrl-0 = <&i2c2_scl_pb10 &i2c2_sda_pb11>;
 status = "okay";
 clock-frequency = <400000>;
};
&spi1 {
 pinctrl-0 = <&spi1_sck_pb3 &spi1_miso_pb4 &spi1_mosi_pb5>;
 status = "okay";
};
&can1 {
 pinctrl-0 = <&can_rx_pb8 &can_tx_pb9>;
 bus-speed = <125000>;
 status = "okay";
};
&iwdg {
 status = "okay";
};
&rtc {
    status = "okay";
};
